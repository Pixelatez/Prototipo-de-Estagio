//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scripts/Input/Input Jogador.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Input/Input Jogador.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputJogador: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputJogador()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Jogador"",
    ""maps"": [
        {
            ""name"": ""Movimento"",
            ""id"": ""562ea030-d8c4-4647-b324-42ce07f61bc6"",
            ""actions"": [
                {
                    ""name"": ""Andar"",
                    ""type"": ""Value"",
                    ""id"": ""9d76b5e1-5e6e-4c3b-9ad7-17151b42587d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pular"",
                    ""type"": ""Button"",
                    ""id"": ""189718ee-f5e2-4c1f-9c51-7b2571ba82a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4f8c5da9-b82a-4699-87e1-1177784a6e32"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58e3cddb-f162-4ce2-9516-f9d22f2a6b70"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e1423d73-050d-4601-a77b-59f6916edab3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""afd7afc3-74b6-40e6-a93c-618f14fc9d09"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ca3a1f7f-5276-4d1a-8236-3d540e06673b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1b972c09-fa94-4d4a-b75a-33d15fa2183b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Andar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9195c5d2-1e75-4056-83ac-b439aec64bf8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pular"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94d9c170-5a92-4edf-b188-f3bcff4591a4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pular"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3f908af-f581-42a9-bc91-59a6ee7d165e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pular"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combate"",
            ""id"": ""b1ff96eb-92cf-49ae-8c8b-4a5ca1af9f7c"",
            ""actions"": [
                {
                    ""name"": ""Ataque"",
                    ""type"": ""Button"",
                    ""id"": ""4984d739-9846-4bb5-ad01-33c2bb56b28f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7ec294e-b60c-43ce-b2bf-9c6ec5eafe96"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Outros"",
            ""id"": ""29fb759d-7646-4ad6-941c-ca5136fd8e73"",
            ""actions"": [
                {
                    ""name"": ""Inventario"",
                    ""type"": ""Button"",
                    ""id"": ""3fd91594-3653-4419-badc-7949acbdd502"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Posicao Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""3d57327d-bdeb-4ef3-ae0e-4d65371f2997"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c52334f-7cf0-4425-afe7-7adbac65d4ba"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventario"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93282da2-6987-4071-980a-a04a31454b0a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Posicao Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movimento
        m_Movimento = asset.FindActionMap("Movimento", throwIfNotFound: true);
        m_Movimento_Andar = m_Movimento.FindAction("Andar", throwIfNotFound: true);
        m_Movimento_Pular = m_Movimento.FindAction("Pular", throwIfNotFound: true);
        // Combate
        m_Combate = asset.FindActionMap("Combate", throwIfNotFound: true);
        m_Combate_Ataque = m_Combate.FindAction("Ataque", throwIfNotFound: true);
        // Outros
        m_Outros = asset.FindActionMap("Outros", throwIfNotFound: true);
        m_Outros_Inventario = m_Outros.FindAction("Inventario", throwIfNotFound: true);
        m_Outros_PosicaoMouse = m_Outros.FindAction("Posicao Mouse", throwIfNotFound: true);
    }

    ~@InputJogador()
    {
        UnityEngine.Debug.Assert(!m_Movimento.enabled, "This will cause a leak and performance issues, InputJogador.Movimento.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Combate.enabled, "This will cause a leak and performance issues, InputJogador.Combate.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Outros.enabled, "This will cause a leak and performance issues, InputJogador.Outros.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movimento
    private readonly InputActionMap m_Movimento;
    private List<IMovimentoActions> m_MovimentoActionsCallbackInterfaces = new List<IMovimentoActions>();
    private readonly InputAction m_Movimento_Andar;
    private readonly InputAction m_Movimento_Pular;
    /// <summary>
    /// Provides access to input actions defined in input action map "Movimento".
    /// </summary>
    public struct MovimentoActions
    {
        private @InputJogador m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MovimentoActions(@InputJogador wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Movimento/Andar".
        /// </summary>
        public InputAction @Andar => m_Wrapper.m_Movimento_Andar;
        /// <summary>
        /// Provides access to the underlying input action "Movimento/Pular".
        /// </summary>
        public InputAction @Pular => m_Wrapper.m_Movimento_Pular;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Movimento; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MovimentoActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MovimentoActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MovimentoActions" />
        public void AddCallbacks(IMovimentoActions instance)
        {
            if (instance == null || m_Wrapper.m_MovimentoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovimentoActionsCallbackInterfaces.Add(instance);
            @Andar.started += instance.OnAndar;
            @Andar.performed += instance.OnAndar;
            @Andar.canceled += instance.OnAndar;
            @Pular.started += instance.OnPular;
            @Pular.performed += instance.OnPular;
            @Pular.canceled += instance.OnPular;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MovimentoActions" />
        private void UnregisterCallbacks(IMovimentoActions instance)
        {
            @Andar.started -= instance.OnAndar;
            @Andar.performed -= instance.OnAndar;
            @Andar.canceled -= instance.OnAndar;
            @Pular.started -= instance.OnPular;
            @Pular.performed -= instance.OnPular;
            @Pular.canceled -= instance.OnPular;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MovimentoActions.UnregisterCallbacks(IMovimentoActions)" />.
        /// </summary>
        /// <seealso cref="MovimentoActions.UnregisterCallbacks(IMovimentoActions)" />
        public void RemoveCallbacks(IMovimentoActions instance)
        {
            if (m_Wrapper.m_MovimentoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MovimentoActions.AddCallbacks(IMovimentoActions)" />
        /// <seealso cref="MovimentoActions.RemoveCallbacks(IMovimentoActions)" />
        /// <seealso cref="MovimentoActions.UnregisterCallbacks(IMovimentoActions)" />
        public void SetCallbacks(IMovimentoActions instance)
        {
            foreach (var item in m_Wrapper.m_MovimentoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovimentoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MovimentoActions" /> instance referencing this action map.
    /// </summary>
    public MovimentoActions @Movimento => new MovimentoActions(this);

    // Combate
    private readonly InputActionMap m_Combate;
    private List<ICombateActions> m_CombateActionsCallbackInterfaces = new List<ICombateActions>();
    private readonly InputAction m_Combate_Ataque;
    /// <summary>
    /// Provides access to input actions defined in input action map "Combate".
    /// </summary>
    public struct CombateActions
    {
        private @InputJogador m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CombateActions(@InputJogador wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Combate/Ataque".
        /// </summary>
        public InputAction @Ataque => m_Wrapper.m_Combate_Ataque;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Combate; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CombateActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CombateActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CombateActions" />
        public void AddCallbacks(ICombateActions instance)
        {
            if (instance == null || m_Wrapper.m_CombateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombateActionsCallbackInterfaces.Add(instance);
            @Ataque.started += instance.OnAtaque;
            @Ataque.performed += instance.OnAtaque;
            @Ataque.canceled += instance.OnAtaque;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CombateActions" />
        private void UnregisterCallbacks(ICombateActions instance)
        {
            @Ataque.started -= instance.OnAtaque;
            @Ataque.performed -= instance.OnAtaque;
            @Ataque.canceled -= instance.OnAtaque;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CombateActions.UnregisterCallbacks(ICombateActions)" />.
        /// </summary>
        /// <seealso cref="CombateActions.UnregisterCallbacks(ICombateActions)" />
        public void RemoveCallbacks(ICombateActions instance)
        {
            if (m_Wrapper.m_CombateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CombateActions.AddCallbacks(ICombateActions)" />
        /// <seealso cref="CombateActions.RemoveCallbacks(ICombateActions)" />
        /// <seealso cref="CombateActions.UnregisterCallbacks(ICombateActions)" />
        public void SetCallbacks(ICombateActions instance)
        {
            foreach (var item in m_Wrapper.m_CombateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CombateActions" /> instance referencing this action map.
    /// </summary>
    public CombateActions @Combate => new CombateActions(this);

    // Outros
    private readonly InputActionMap m_Outros;
    private List<IOutrosActions> m_OutrosActionsCallbackInterfaces = new List<IOutrosActions>();
    private readonly InputAction m_Outros_Inventario;
    private readonly InputAction m_Outros_PosicaoMouse;
    /// <summary>
    /// Provides access to input actions defined in input action map "Outros".
    /// </summary>
    public struct OutrosActions
    {
        private @InputJogador m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OutrosActions(@InputJogador wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Outros/Inventario".
        /// </summary>
        public InputAction @Inventario => m_Wrapper.m_Outros_Inventario;
        /// <summary>
        /// Provides access to the underlying input action "Outros/PosicaoMouse".
        /// </summary>
        public InputAction @PosicaoMouse => m_Wrapper.m_Outros_PosicaoMouse;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Outros; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OutrosActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OutrosActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OutrosActions" />
        public void AddCallbacks(IOutrosActions instance)
        {
            if (instance == null || m_Wrapper.m_OutrosActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OutrosActionsCallbackInterfaces.Add(instance);
            @Inventario.started += instance.OnInventario;
            @Inventario.performed += instance.OnInventario;
            @Inventario.canceled += instance.OnInventario;
            @PosicaoMouse.started += instance.OnPosicaoMouse;
            @PosicaoMouse.performed += instance.OnPosicaoMouse;
            @PosicaoMouse.canceled += instance.OnPosicaoMouse;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OutrosActions" />
        private void UnregisterCallbacks(IOutrosActions instance)
        {
            @Inventario.started -= instance.OnInventario;
            @Inventario.performed -= instance.OnInventario;
            @Inventario.canceled -= instance.OnInventario;
            @PosicaoMouse.started -= instance.OnPosicaoMouse;
            @PosicaoMouse.performed -= instance.OnPosicaoMouse;
            @PosicaoMouse.canceled -= instance.OnPosicaoMouse;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OutrosActions.UnregisterCallbacks(IOutrosActions)" />.
        /// </summary>
        /// <seealso cref="OutrosActions.UnregisterCallbacks(IOutrosActions)" />
        public void RemoveCallbacks(IOutrosActions instance)
        {
            if (m_Wrapper.m_OutrosActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OutrosActions.AddCallbacks(IOutrosActions)" />
        /// <seealso cref="OutrosActions.RemoveCallbacks(IOutrosActions)" />
        /// <seealso cref="OutrosActions.UnregisterCallbacks(IOutrosActions)" />
        public void SetCallbacks(IOutrosActions instance)
        {
            foreach (var item in m_Wrapper.m_OutrosActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OutrosActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OutrosActions" /> instance referencing this action map.
    /// </summary>
    public OutrosActions @Outros => new OutrosActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Movimento" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MovimentoActions.AddCallbacks(IMovimentoActions)" />
    /// <seealso cref="MovimentoActions.RemoveCallbacks(IMovimentoActions)" />
    public interface IMovimentoActions
    {
        /// <summary>
        /// Method invoked when associated input action "Andar" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAndar(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pular" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPular(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Combate" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CombateActions.AddCallbacks(ICombateActions)" />
    /// <seealso cref="CombateActions.RemoveCallbacks(ICombateActions)" />
    public interface ICombateActions
    {
        /// <summary>
        /// Method invoked when associated input action "Ataque" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Outros" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OutrosActions.AddCallbacks(IOutrosActions)" />
    /// <seealso cref="OutrosActions.RemoveCallbacks(IOutrosActions)" />
    public interface IOutrosActions
    {
        /// <summary>
        /// Method invoked when associated input action "Inventario" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventario(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Posicao Mouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosicaoMouse(InputAction.CallbackContext context);
    }
}
